---
import Layout from '../layouts/Layout.astro';
import OkresyStatus from '../components/OkresyStatus.astro';
import DocumentTable from '../components/DocumentTable.astro';
// Import dát vygenerovaných Python skriptom
// import data from '../../../data/4_diff_analysis.json';

// Import Node.js built-in modules for file system and path manipulation
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

// Import zoznam okresov
import zoznamOkresovData from '../../../data/1_zoznam_okresov.json';

// Import the initial JSON data.
// We'll use 3_diff_test.json as specified by the structure requirements.
import rawInputData from '../../../data/2_uradne_tabule_old.json';

// Import the getDocId function
import { getDocId } from '../scripts/getDocId.js';

// Define props for the component
const pageTitle = "Nové dokumenty na úradných tabuliach ŽP za posledných 7 dní";
const pageDescription = "Zoznam dokumentov pridaných za posledný deň na úradné tabule okresných úradov životného prostredia:";

// Define the directory of the current Astro file to help resolve paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('dirname:', __dirname);
console.log('filename:', __filename);


// Helper function to get a date string in YYYY-MM-DD format for N days ago
function getDateStringDaysAgo(days) {
    const date = new Date();
    date.setDate(date.getDate() - days);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Function to filter documents by date
function filterData(inputData, oldestDateString) {
    const filteredKraje = [];

    for (const kraj of inputData) {
        const newKraj = { ...kraj, okresy: [] }; // Start with a new kraj, copy non-array properties
        if (kraj.okresy) {
            for (const okres of kraj.okresy) {
                const newOkres = { ...okres, dokumenty_zivotne_prostredie: [] };
                if (okres.dokumenty_zivotne_prostredie) {
                    for (const kategoria of okres.dokumenty_zivotne_prostredie) {
                        let filteredDocs = [];
                        if (kategoria.dokumenty) {
                            // Direct string comparison works for YYYY-MM-DD format
                            filteredDocs = kategoria.dokumenty.filter(doc => doc.datum && doc.datum >= oldestDateString);
                        }

                        if (filteredDocs.length > 0) {
                            // Add kategoria with filtered documents
                            newOkres.dokumenty_zivotne_prostredie.push({
                                ...kategoria,
                                dokumenty: filteredDocs
                            });
                        }
                    }
                }

                // Only add okres if it has any kategorie with documents
                if (newOkres.dokumenty_zivotne_prostredie.length > 0) {
                    newKraj.okresy.push(newOkres);
                }
            }
        }

        // Only add kraj if it has any okresy with documents
        if (newKraj.okresy.length > 0) {
            filteredKraje.push(newKraj);
        }
    }
    return filteredKraje;
}

function getDateString() {
    const now = new Date();
    const year = now.getUTCFullYear();
    const month = String(now.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-indexed
    const day = String(now.getUTCDate()).padStart(2, '0');
    const hours = String(now.getUTCHours()).padStart(2, '0');
    const minutes = String(now.getUTCMinutes()).padStart(2, '0');
    const seconds = String(now.getUTCSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

// Helper function to create an array or append to an existing one
function createOrAppendToArray(array, item) {
    if (array && Array.isArray(array)) {
        array.push(item);
        return array;
    } else {
        return [item];
    }
}

function appendErrorToStatus(doc, errorMessage) {
    console.error('Error:', errorMessage);
    if (!doc.status) {
        doc.status = [];
    }
    doc.status.push({
        date: getDateString(),
        type: "error",
        text: errorMessage
    });
}

// Function to enrich document data with content from corresponding analysis.json files
function enrichDocumentsWithAnalysis(inputData) {
    // Deep copy the input data to avoid modifying the original imported object/cache
    const processedData = structuredClone(inputData);

    for (const kraj of processedData) {
        const krajName = kraj.kraj;
        if (kraj.okresy) {
            for (const okres of kraj.okresy) {
                const okresName = okres.nazov;
                if (okres.dokumenty_zivotne_prostredie) {
                    for (const kategoria of okres.dokumenty_zivotne_prostredie) {
                        if (kategoria.dokumenty) {
                            for (const doc of kategoria.dokumenty) {
                                if (doc.url) {
                                    const docId = getDocId(doc.url); // Použitie getDocId

                                    if (docId) {
                                        doc.docId = docId; // Uloženie docId do dokumentu
                                        // Construct the path to the analysis.json file.
                                        const docDir = path.resolve(
                                            __dirname, // Current file's directory (website/src/pages)
                                            '../../../', // Up to project root (/home/miso/projects/VLK/uradne_nastenky/)
                                            'data',
                                            'docs',
                                            krajName,
                                            okresName,
                                            docId // Použitie docId získaného z getDocId
                                        );
                                        const statusFilePath   = path.resolve(docDir, 'status.json');
                                        const analysisFilePath = path.resolve(docDir, 'analysis.json');

                                        try {
                                            if (fs.existsSync(statusFilePath)) {
                                                const statusContent = fs.readFileSync(statusFilePath, 'utf-8');
                                                doc.status = JSON.parse(statusContent);
                                            }
                                        } catch (error) {
                                            appendErrorToStatus(doc, `Failed to load/parse status from ${statusFilePath}: ${error.message}`);
                                        }

                                        try {
                                            if (fs.existsSync(analysisFilePath)) {
                                                const analysisContent = fs.readFileSync(analysisFilePath, 'utf-8');
                                                doc.analyza = JSON.parse(analysisContent);
                                            } else {
                                                appendErrorToStatus(doc, `Analysis file not found: ${analysisFilePath}`);
                                            }
                                        } catch (error) {
                                            appendErrorToStatus(doc, `Failed to load/parse analysis from ${analysisFilePath}: ${error.message}`);
                                        }
                                    } else {
                                        doc.analyza = { message: `Could not determine document ID from URL: ${doc.url}` };
                                    }
                                } else {
                                    doc.analyza = { message: "Document has no URL." };
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return processedData;
}

const OLDEST_DATE_TO_SHOW = getDateStringDaysAgo(7);
console.log(`Filtering documents newer than or equal to: ${OLDEST_DATE_TO_SHOW}`);
const rawInputDataFiltered = filterData(rawInputData, OLDEST_DATE_TO_SHOW);

// Process the imported data to include analysis content
const data = enrichDocumentsWithAnalysis(rawInputDataFiltered);
console.log('Processed data:', JSON.stringify(data, null, 2));

// --- Nacitanie statusov pre okresy ---
const okresyStatus = structuredClone(rawInputData);
for (const kraj of okresyStatus) {
    // Predpokladame, ze nazov kraja pre adresarovu strukturu je v 'kraj.kraj'
    const krajName = kraj.kraj;
    if (kraj.okresy && krajName) {
        for (const okres of kraj.okresy) {
            // Vymazanie kluca dokumenty_zivotne_prostredie z okresu
            delete okres.dokumenty_zivotne_prostredie;
            // Predpokladame, ze nazov okresu pre adresarovu strukturu je v 'okres.nazov'
            const okresName = okres.nazov;
            if (okresName) {
                const statusFilePath = path.resolve(
                    __dirname,
                    '../../../data/docs', // Cesta k 'data/docs' z 'website/src/pages'
                    krajName,
                    okresName,
                    'status.json'
                );

                try {
                    if (fs.existsSync(statusFilePath)) {
                        const statusContent = fs.readFileSync(statusFilePath, 'utf-8');
                        okres.status = JSON.parse(statusContent);
                    }
                } catch (error) {
                    console.error(`Chyba pri načítaní alebo spracovaní status.json pre ${krajName}/${okresName} z ${statusFilePath}: ${error.message}`);
                    // Mozete sem pridat specificke logovanie chyby do okres.status, ak je to potrebne
                    // napr. okres.status = { error: `Failed to load status: ${error.message}` };
                }
            } else {
                console.warn(`Okres v kraji '${krajName}' nemá definovaný názov (okres.nazov). Preskakujem načítanie statusu.`);
            }
        }
    } else if (!krajName) {
        console.warn("Kraj v 'zoznamOkresovData' nemá definovaný názov (kraj.kraj). Preskakujem načítanie statusov pre jeho okresy.");
    }
}
// Pre ucely ladenia mozes odkomentovat nasledujuci riadok:
// console.log('okresyStatus:', JSON.stringify(okresyStatus, null, 2));
---

<Layout title={pageTitle}>
    <main>
        <h1>{pageTitle}</h1>
        <p>
            <a href={import.meta.env.BASE_URL + 'last_day'} class="btn btn-primary">Zobraz iba dokumenty za posledný deň</a>
        </p>
        <OkresyStatus
            data={okresyStatus}
        />
        {/* Use the component, passing the imported data and other props */}
        <DocumentTable
            id="env-documents-table" {/* Optional: Provide a specific ID */}
            data={data}              {/* Pass the raw imported data */}
            title={pageTitle}
            description={pageDescription}
        />
        {/* You could potentially add another DocumentTable here with different data/props */}
    </main>
</Layout>