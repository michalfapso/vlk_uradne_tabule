---
import Layout from '../layouts/Layout.astro';
import OkresyStatus from '../components/OkresyStatus.astro';
import DocumentTable from '../components/DocumentTable.astro';
// Import dát vygenerovaných Python skriptom
// import data from '../../../data/minv/4_diff_analysis.json';

// Import Node.js built-in modules for file system and path manipulation
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

// Import the initial JSON data.
// We'll use 3_diff_test.json as specified by the structure requirements.
import minv_rawInputData from '../../../data/minv/2_uradne_tabule_old.json';
import minzp_rawInputData from '../../../data/minzp/4_merge_json_docs_old.json';

// Import the getDocId function
import { getDocId } from '../scripts/getDocId.js';

// Define props for the component
const pageTitle = "Nové dokumenty na úradných tabuliach ŽP za posledných 7 dní";
const pageDescription = "Zoznam dokumentov pridaných za posledný deň na úradné tabule okresných úradov životného prostredia:";

// Define the directory of the current Astro file to help resolve paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('dirname:', __dirname);
console.log('filename:', __filename);


// Helper function to get a date string in YYYY-MM-DD format for N days ago
function getDateStringDaysAgo(days) {
    const date = new Date();
    date.setDate(date.getDate() - days);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Function to flatten the raw input data structure
function flattenRawData(inputData) {
    const flatDocuments = [];
    if (!inputData || !Array.isArray(inputData)) {
        console.warn("flattenRawData: inputData is not a valid array.");
        return flatDocuments;
    }

    for (const kraj of inputData) {
        if (!kraj || typeof kraj !== 'object') continue;

        if (kraj.okresy && Array.isArray(kraj.okresy)) {
            for (const okres of kraj.okresy) {
                if (!okres || typeof okres !== 'object') continue;
                const okresName = okres.nazov;

                if (okres.dokumenty_zivotne_prostredie && Array.isArray(okres.dokumenty_zivotne_prostredie)) {
                    for (const kategoriaObj of okres.dokumenty_zivotne_prostredie) {
                        if (!kategoriaObj || typeof kategoriaObj !== 'object') continue;
                        const kategoriaName = kategoriaObj.kategoria;

                        if (kategoriaObj.dokumenty && Array.isArray(kategoriaObj.dokumenty)) {
                            for (const doc of kategoriaObj.dokumenty) {
                                if (!doc || typeof doc !== 'object') continue;
                                flatDocuments.push({
                                    kraj: kraj.kraj,
                                    kraj_url: kraj.url,
                                    okres: okres.nazov,
                                    okres_url: okres.url,
                                    okres_url_tabule: okres.url_tabule,
                                    doc_kategoria: kategoriaName,
                                    ...doc // Spread the original document properties
                                });
                            }
                        }
                    }
                }
            }
        }
    }
    return flatDocuments;
}

// Function to filter documents by date (works on a flat array of documents)
function filterDocumentsByDate(documents, oldestDateString) {
    if (!documents || !Array.isArray(documents)) {
        return [];
    }
    // Direct string comparison works for YYYY-MM-DD format
    return documents.filter(doc => doc.datum && doc.datum >= oldestDateString);
}

function getDateString() {
    const now = new Date();
    const year = now.getUTCFullYear();
    const month = String(now.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-indexed
    const day = String(now.getUTCDate()).padStart(2, '0');
    const hours = String(now.getUTCHours()).padStart(2, '0');
    const minutes = String(now.getUTCMinutes()).padStart(2, '0');
    const seconds = String(now.getUTCSeconds()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

function appendErrorToStatus(doc, errorMessage) {
    console.error('Error:', errorMessage);
    if (!doc.status) {
        doc.status = [];
    }
    doc.status.push({
        date: getDateString(),
        type: "error",
        text: errorMessage
    });
}

// Function to enrich flattened document data with content from corresponding analysis.json files
function enrichFlattenedDocumentsWithAnalysis(flatDocs, dataSubdir) {
    const enrichedDocs = [];

    for (const originalDoc of flatDocs) {
        // Create a shallow copy to add new properties like docId, status, analyza
        const doc = { ...originalDoc };

        if (doc.url) {
            const docId = getDocId(doc.url); // Použitie getDocId

            if (docId) {
                doc.docId = docId; // Uloženie docId do dokumentu

                // krajName and okresName are now directly on the doc object from flattening
                const krajName = doc.kraj;
                const okresName = doc.okres;

                // Ensure krajName and okresName are valid for path construction
                if (!krajName || !okresName) {
                    appendErrorToStatus(doc, `Missing kraj ('${krajName}') or okres ('${okresName}') name for document URL: ${doc.url}. Cannot load analysis.`);
                    enrichedDocs.push(doc);
                    continue; 
                }

                // Construct the path to the analysis.json file.
                const docDir = path.resolve(
                    __dirname, // Current file's directory (website/src/pages)
                    '../../../', // Up to project root (/home/miso/projects/VLK/uradne_nastenky/)
                    'data',
                    dataSubdir,
                    'docs',
                    krajName,
                    okresName,
                    docId // Použitie docId získaného z getDocId
                );
                const statusFilePath   = path.resolve(docDir, 'status.json');
                const analysisFilePath = path.resolve(docDir, 'analysis.json');

                try {
                    if (fs.existsSync(statusFilePath)) {
                        const statusContent = fs.readFileSync(statusFilePath, 'utf-8');
                        // Ensure doc.status is an array before merging or assigning
                        const loadedStatus = JSON.parse(statusContent);
                        doc.status = doc.status ? [...doc.status, ...loadedStatus] : loadedStatus;
                    }
                } catch (error) {
                    appendErrorToStatus(doc, `Failed to load/parse status from ${statusFilePath}: ${error.message}`);
                }

                try {
                    if (fs.existsSync(analysisFilePath)) {
                        const analysisContent = fs.readFileSync(analysisFilePath, 'utf-8');
                        doc.analyza = JSON.parse(analysisContent);
                    } else {
                        appendErrorToStatus(doc, `Analysis file not found: ${analysisFilePath}`);
                    }
                } catch (error) {
                    appendErrorToStatus(doc, `Failed to load/parse analysis from ${analysisFilePath}: ${error.message}`);
                }
            } else {
                appendErrorToStatus(doc, `Could not determine document ID from URL: ${doc.url}`);
            }
        } else {
            appendErrorToStatus(doc, "Document has no URL.");
        }
        if (dataSubdir == 'minzp') {
            if (!doc.kraj_url) {
                doc.kraj_url = 'https://www.minzp.sk/uradna-tabula/priroda/';
            }
        } else if (dataSubdir == 'minv') {
            if (doc.kraj_url && doc.kraj_url.startsWith('/')) {
                doc.kraj_url = 'https://www.minv.sk' + doc.kraj_url;
            }
            if (doc.okres_url && doc.okres_url.startsWith('/')) {
                doc.okres_url = 'https://www.minv.sk' + doc.okres_url;
            }
            if (doc.okres_url_tabule && doc.okres_url_tabule.startsWith('/')) {
                doc.okres_url_tabule = 'https://www.minv.sk' + doc.okres_url_tabule;
            }
            if (doc.okres_url_tabule && !doc.okres_url_tabule.endsWith('#popis')) {
                doc.okres_url_tabule = doc.okres_url_tabule + '#popis';
            }
        }
        enrichedDocs.push(doc);
    }
    return enrichedDocs;
}

const OLDEST_DATE_TO_SHOW = getDateStringDaysAgo(7);

// Function to load okres-level status messages and flatten them
function getFlatOkresStatusMessages(inputData, baseDir) {
    const flatStatusMessages = [];
    if (!inputData || !Array.isArray(inputData)) {
        console.warn("getFlatOkresStatusMessages: inputData is not a valid array.");
        return flatStatusMessages;
    }

    for (const krajData of inputData) {
        if (!krajData || typeof krajData !== 'object' || !krajData.kraj) continue;
        const krajName = krajData.kraj;

        if (krajData.okresy && Array.isArray(krajData.okresy)) {
            for (const okresData of krajData.okresy) {
                if (!okresData || typeof okresData !== 'object' || !okresData.nazov) continue;
                const okresName = okresData.nazov;
                const okresUrlTabule = okresData.url; // okres.url from minv_rawInputData is the link to the board

                const statusFilePath = path.resolve(
                    baseDir,
                    '../../../data/minv/docs',
                    krajName,
                    okresName,
                    'status.json'
                );

                let okresStatusEntries = [];
                try {
                    if (fs.existsSync(statusFilePath)) {
                        const statusContent = fs.readFileSync(statusFilePath, 'utf-8');
                        const parsedStatus = JSON.parse(statusContent);
                        if (Array.isArray(parsedStatus)) {
                            okresStatusEntries = parsedStatus;
                        } else {
                            console.warn(`Parsed status for ${krajName}/${okresName} is not an array. Path: ${statusFilePath}`);
                        }
                    }
                } catch (error) {
                    console.error(`Chyba pri načítaní alebo spracovaní status.json pre ${krajName}/${okresName} z ${statusFilePath}: ${error.message}`);
                }

                for (const statusEntry of okresStatusEntries) {
                    if (statusEntry && typeof statusEntry === 'object') {
                        flatStatusMessages.push({
                            kraj: krajName,
                            okres: okresName,
                            okres_url_tabule: okresUrlTabule,
                            datum: statusEntry.date,
                            typ: statusEntry.type,
                            sprava: statusEntry.text
                        });
                    }
                }
            }
        }
    }
    return flatStatusMessages;
}

// --- Nacitanie statusov pre okresy ---
const minv_okresyStatusData = getFlatOkresStatusMessages(minv_rawInputData, __dirname);
// console.log('Data for OkresyStatus component:', JSON.stringify(okresyStatusData, null, 2));
// --- Process documents for the DocumentTable ---
console.log(`Filtering documents newer than or equal to: ${OLDEST_DATE_TO_SHOW}`);
// 1. Flatten the raw data to a list of documents
const minv_allDocumentsFlat = flattenRawData(minv_rawInputData);
// 2. Filter the flattened documents by date
const minv_filteredFlatDocs = filterDocumentsByDate(minv_allDocumentsFlat, OLDEST_DATE_TO_SHOW);
// 3. Enrich the filtered documents with analysis content
const minv_data = enrichFlattenedDocumentsWithAnalysis(minv_filteredFlatDocs, 'minv');

const minzp_filteredFlatDocs = filterDocumentsByDate(minzp_rawInputData, OLDEST_DATE_TO_SHOW);
const minzp_data = enrichFlattenedDocumentsWithAnalysis(minzp_filteredFlatDocs, 'minzp');

const data = [...minv_data, ...minzp_data]; // Combine both sources
// console.log('Processed data for DocumentTable (flattened, filtered, enriched):', JSON.stringify(data, null, 2));

console.log('minv_data:', JSON.stringify(minv_data, null, 2));
console.log('minzp_data:', JSON.stringify(minzp_data, null, 2));
console.log('data:', JSON.stringify(data, null, 2));

---

<Layout title={pageTitle}>
    <main>
        <h1>{pageTitle}</h1>
        <p>
            <a href={import.meta.env.BASE_URL + 'last_day'} class="btn btn-primary">Zobraz iba dokumenty za posledný deň</a>
        </p>
        <OkresyStatus
            data={minv_okresyStatusData} {/* OkresyStatus now receives a flat list of status messages */}
        />
        {/* Use the component, passing the processed flat data */}
        <DocumentTable
            id="env-documents-table" {/* Optional: Provide a specific ID */}
            data={data}              {/* Pass the flattened, filtered, and enriched data */}
            title={pageTitle}
            description={pageDescription}
        />
        {/* You could potentially add another DocumentTable here with different data/props */}
    </main>
</Layout>