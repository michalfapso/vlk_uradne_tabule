---
// src/components/DocumentTable.astro
import { TabulatorFull as Tabulator } from 'tabulator-tables'; // Import here for type safety if needed, but primarily loaded client-side
import { statusTypeToIcon } from '../scripts/statusTypeToIcon.js'; // Import utility function for status type to icon mapping

const {
  id = 'document-table', // Default ID
  data = [],             // Default to empty array
  description = 'Zoznam dokumentov:', // Default description
} = Astro.props;

// --- Príprava dát (moved inside component) ---
// Sploštenie vnorenej štruktúry dát do jedného poľa dokumentov
// This assumes the input 'data' prop has the same structure as the original JSON import
const allDocuments = data.map(doc => ({ // Add optional chaining
    ...doc, // Pôvodné vlastnosti dokumentu (datum, nazov, url, analyza)
    has_analysis: !!doc.analyza, // Pridanie príznaku pre jednoduchšiu kontrolu v šablóne
})) || []; // Default to empty array if documents are missing

console.log('allDocuments:', allDocuments);

// Generate unique ID for the toggle button to avoid conflicts if multiple tables are on the page
const toggleButtonId = `${id}-toggle-summaries-btn`;
---

{/* Component's HTML Structure */}
<div class="document-table-container">
    <h3>{description}</h3>
    <button id={toggleButtonId} style="width:14rem; margin-bottom: 15px; padding: 8px 12px; cursor: pointer;">Rozbaliť všetky</button>
    {allDocuments.length === 0 ? (
        <p>Neboli nájdené žiadne dokumenty zodpovedajúce kritériám.</p>
    ) : (
        <div id={id}></div>
    )}
</div>

{/* Global Tabulator CSS */}
<style is:global>
  @import 'tabulator-tables/dist/css/tabulator.min.css';
</style>

{/* Script to load Tabulator onto the window object */}
<script>
  // Import Tabulator from the installed package
  import { TabulatorFull as Tabulator } from 'tabulator-tables';
  // Make Tabulator available globally ONLY IF IT ISN'T ALREADY
  // This prevents errors if multiple components try to load it,
  // though ideally this is handled at a higher level (e.g., layout)
  if (!window.Tabulator) {
      window.Tabulator = Tabulator;
      console.log('[DocumentTable] Tabulator loaded onto window.');
  } else {
      console.log('[DocumentTable] Tabulator already exists on window.');
  }

  import { statusTypeToIcon } from '../scripts/statusTypeToIcon.js'; // Import the utility function
  // Make statusTypeToIcon available globally
  if (!window.statusTypeToIcon) {
      window.statusTypeToIcon = statusTypeToIcon;
  }
</script>

{/* Inline script for Tabulator initialization */}
<script define:vars={{ tableId: id, tableData: allDocuments, btnId: toggleButtonId }} is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        // Ensure Tabulator is available
        if (!window.Tabulator) {
            console.error(`[DocumentTable ${tableId}] Tabulator class not found on window object.`);
            // Optionally wait a bit more or listen for a custom event if loading is complex
            return;
        }

        const documents = tableData;
        const container = document.getElementById(tableId);
        const toggleBtn = document.getElementById(btnId);

        if (!container) {
            console.error(`[DocumentTable ${tableId}] Container element #${tableId} not found.`);
            return;
        }

        // Sorter function for fields that might be arrays, strings, null, or undefined
        const arrayOrStringSorter = (a, b, aRow, bRow, column, dir, sorterParams) => {
            // a and b are the raw values from the field (e.g., analyza.typ_zasahu)
            let strA, strB;

            const processValue = (val) => {
                if (Array.isArray(val)) {
                    return val.join(', '); // Join array elements into a string
                }
                if (val === null || typeof val === 'undefined') {
                    return ""; // Treat null/undefined as empty string for sorting
                }
                return String(val); // Ensure it's a string for comparison
            };

            strA = processValue(a);
            strB = processValue(b);

            // Perform case-insensitive comparison using localeCompare
            return strA.localeCompare(strB, undefined, { sensitivity: 'base' });
        };

        // Funkcia na formátovanie dátumu (musíme ju definovať aj na klientovi)
        const formatClientDate = (dateString) => {
          if (!dateString) return 'N/A';
          try {
              const date = new Date(dateString);
              return date.toLocaleDateString('sk-SK');
          } catch (e) {
              console.error("Chyba pri formátovaní dátumu:", dateString, e);
              return 'Neplatný dátum';
          }
        };

        // Inicializácia Tabulatora
        if (documents.length > 0) {
            const fn_tooltip = function(cell){
                // cell: Tabulator cell component
                // cell.target: The actual HTML element the mouse is over

                // Find the closest ancestor (or self) of cell.target that has the class 'tabulator-cell'
                let elementToMeasure = cell.target.closest('.tabulator-cell');

                // If closest() didn't find it (e.g., cell.target is not inside a .tabulator-cell,
                // or the DOM structure is unexpected), fall back to the cell's root element.
                if (!elementToMeasure) {
                    console.warn(`[fn_tooltip] '.tabulator-cell' not found via cell.target.closest(). Falling back to cell.getElement(). Target:`, cell.target);
                    elementToMeasure = cell.getElement(); // This is the cell's main DOM element.
                }

                // Debugging logs (updated)
                // console.log('[fn_tooltip] Tabulator cell component:', cell);
                // console.log('[fn_tooltip] Event target (original element):', cell.target);
                // console.log('[fn_tooltip] Element selected for measurement:', elementToMeasure);

                if (elementToMeasure) {
                    // Now, elementToMeasure is the '.tabulator-cell' (or the element assumed to be it).
                    // Perform the scrollWidth vs clientWidth check on this element.
                    // console.log(`[fn_tooltip] Measuring ${elementToMeasure.className} - scrollWidth: ${elementToMeasure.scrollWidth}, clientWidth: ${elementToMeasure.clientWidth}`);
                    if (elementToMeasure.scrollWidth > elementToMeasure.clientWidth) {
                        // If it overflows, return the outerText of the original event target (cell.target),
                        // consistent with the original function's behavior for the tooltip content.
                        return cell.target.outerText;
                    }
                } else {
                    // This should be rare, meaning neither closest() nor getElement() yielded a valid element.
                    console.error('[fn_tooltip] Could not determine element to measure, even after fallback. Cell:', cell);
                }
                return ''; // In all other cases (no overflow, element not found), return an empty string for no tooltip.
            };

            let allSummariesVisible = false; // Stav pre hromadné zobrazenie/skrytie
            const table = new window.Tabulator(`#${tableId}`, { // Use the dynamic ID
                data: documents,
                // height: "600",
                height: "100%",
                maxHeight:"100%",
                layout: "fitDataStretch",
                responsiveLayout: "collapse",
                pagination: "local",
                paginationSize: 100,
                paginationSizeSelector: [10, 20, 50, 100, 200, 500],
                initialSort:[
                    {column:"datum", dir:"desc"}, // Sort by 'datum' field, descending
                ],
                rowFormatter: function(row) {
                    var element = row.getElement();
                    var data = row.getData();

                    var summaryContainer = document.createElement("div");
                    summaryContainer.className = "row-summary";
                    summaryContainer.style.display = "none";
                    summaryContainer.style.padding = "10px 15px";
                    summaryContainer.style.borderTop = "1px solid #eee";
                    summaryContainer.style.backgroundColor = "#f9f9f9";
                    summaryContainer.style.whiteSpace = "pre-wrap"; // Remove this if using <pre> for JSON

                    let summaryHtml = '';
                    if (data.analyza) {
                        summaryHtml += `<b>Zhrnutie:</b> ${data.analyza?.zhrnutie || 'Bez zhrnutia textu.'}<br><br>`; // Add line breaks for spacing
                    }
                    summaryHtml += '<b>docID:</b> ' + (data.docId || 'N/A') + '<br><br>';

                    if (data.status) {
                        summaryHtml += `<b>Chyby:</b><br>`;
                        data.status.forEach((status) => {
                            summaryHtml += `${status.date} ${window.statusTypeToIcon(status.type)} ${status.text}<br>`;
                        });
                        summaryHtml += '<br>';
                    }
                    if (data.analyza) {
                        const detailsElement = document.createElement('details');
                        const summaryElement = document.createElement('summary');
                        summaryElement.style.cursor = 'pointer';
                        summaryElement.style.fontWeight = 'bold';
                        summaryElement.textContent = 'Kompletná analýza (JSON)';
                        detailsElement.appendChild(summaryElement);

                        const preElement = document.createElement('pre');
                        preElement.style.whiteSpace = 'pre-wrap'; // Ensure JSON wraps
                        preElement.style.wordBreak = 'break-all'; // Ensure long strings break
                        preElement.style.marginTop = '5px'; // Add some space above JSON
                        try {
                            preElement.textContent = JSON.stringify(data.analyza, null, 2); // Use 2 spaces for indentation
                        } catch (e) {
                            console.error("Chyba pri stringify data.analyza:", data.analyza, e);
                            preElement.textContent = 'Chyba pri generovaní JSON analýzy.';
                        }
                        detailsElement.appendChild(preElement);
                        summaryContainer.appendChild(detailsElement); // Append details element directly
                    } else {
                        summaryHtml += '<strong>Objekt analýzy nie je dostupný.</strong>';
                    }

                    // Add the summary text (if any) before the details element
                    const summaryTextNode = document.createElement('div');
                    summaryTextNode.innerHTML = summaryHtml;
                    summaryContainer.insertBefore(summaryTextNode, summaryContainer.firstChild);

                    element.appendChild(summaryContainer);
                },
                columns: [
                    { title: "Dátum", field: "datum", hozAlign: "left", tooltip: fn_tooltip,
                        // sorter: "date", sorterParams:{ format:"YYYY-MM-DD" },
                        // formatter: (cell) => formatClientDate(cell.getValue()),
                        width: 90 },
                    { title: "Kraj", field: "kraj", hozAlign: "left", headerFilter: "input", width: 120, tooltip: fn_tooltip, formatter: (cell) => {
                        const value = cell.getValue();
                        const data = cell.getData();
                        const url = `${data.kraj_url}`;
                        return url
                            ? `<a href="${url}" target="_blank" rel="noopener noreferrer">${value}</a>`
                            : value;
                    }},
                    { title: "Okres", field: "okres", hozAlign: "left", headerFilter: "input", width: 120, tooltip: fn_tooltip, formatter: (cell) => {
                        const value = cell.getValue();
                        const data = cell.getData();
                        const url = data.okres_url_tabule;
                        return url
                            ? `<a href="${url}" target="_blank" rel="noopener noreferrer">${value}</a>`
                            : value;
                    }},
                    { title: "Typ zásahu", field: "analyza.typ_zasahu", hozAlign: "left", headerFilter: "input", width: 120, tooltip: fn_tooltip, sorter: arrayOrStringSorter, formatter: (cell) => {
                        if (!cell.getData().has_analysis) return 'Bez analýzy';
                        const value = cell.getValue();
                        return Array.isArray(value) ? value.join(', ') : (value || 'N/A');
                    }},
                    { title: "Typ územia", field: "analyza.typ_uzemia", hozAlign: "left", headerFilter: "input", width: 120, tooltip: fn_tooltip, sorter: arrayOrStringSorter, formatter: (cell) => {
                        if (!cell.getData().has_analysis) return '-';
                        const value = cell.getValue();
                        return Array.isArray(value) ? value.join(', ') : (value || 'N/A');
                    }},
                    { title: "Názov dokumentu", field: "nazov", hozAlign: "left", headerFilter: "input", minWidth: 300, tooltip: fn_tooltip, formatter: (cell) => {
                        const url = cell.getData().url;
                        const nazov = cell.getValue();
                        const status = cell.getData().status;
                        const kategoria = cell.getData().doc_kategoria;

                        return `${status ? window.statusTypeToIcon(status[0].type)+' ' : ''}`
                            + `${kategoria ? `<span>${kategoria}</span> / ` : ''}`
                            + `<a href="${url}" target="_blank" rel="noopener noreferrer">${nazov}</a>`;
                    }},
                ],
            });
            table.on("rowClick", function(e, row){
                // Check if the click originated from within the summary container or its children
                const targetElement = e.target;
                if (targetElement.closest('.row-summary')) {
                    return; // Do nothing if the click was inside the summary area
                }

                const summaryContainer = row.getElement().querySelector(".row-summary");
                if (summaryContainer) {
                    // summaryContainer.style.display = summaryContainer.style.display === "none" ? "block" : "none";

                    // const currentScrollY = window.scrollY;
                    const tableElement = table.element; // Get the main table container element
                    const originalTableMinHeight = tableElement.style.minHeight; // Store original minHeight

                    // Set minHeight to current actual height to prevent collapse during DOM change/redraw
                    tableElement.style.minHeight = tableElement.offsetHeight + "px";

                    const isHidden = summaryContainer.style.display === "none";
                    summaryContainer.style.display = isHidden ? "block" : "none";

                    // With the minHeight trick, we might not need an explicit Tabulator redraw call for a single row,
                    // as Tabulator might implicitly handle it or the browser reflow is stabilized.
                    // The problematic row.recalcHeight() is removed.
                    // table.redraw(true);

                    // Restore scroll position on the next animation frame
                    // This gives the browser and Tabulator time to adjust to the new height
                    // requestAnimationFrame(() => {
                        // window.scrollTo(0, currentScrollY);
                        // After scrolling and potential redraw, restore original minHeight or remove it
                        // tableElement.style.minHeight = originalTableMinHeight || '';
                        // setTimeout(() => {
                            // tableElement.style.minHeight = originalTableMinHeight || '';
                        // }, 0);
                    // });
                }
            });

            // Funkcionalita pre tlačidlo na hromadné zobrazenie/skrytie
            if (toggleBtn) {
                toggleBtn.addEventListener('click', () => {
                    const currentScrollY = window.scrollY;
                    const tableElement = table.element;
                    const originalTableMinHeight = tableElement.style.minHeight;

                    // Set minHeight to current actual height
                    tableElement.style.minHeight = tableElement.offsetHeight + "px";

                    allSummariesVisible = !allSummariesVisible;
                    table.getRows().forEach(row => { // getRows() gets all rows, visible or not
                        const summaryContainer = row.getElement().querySelector(".row-summary");
                        if (summaryContainer) {
                            summaryContainer.style.display = allSummariesVisible ? "block" : "none";
                            // No need to call recalcHeight on each row here if we do a full table.redraw
                        }
                    });

                    // After all display styles are set, redraw the table to account for height changes.
                    // table.redraw(true);

                    // requestAnimationFrame(() => {
                    //     window.scrollTo(0, currentScrollY);
                    //     // Restore original minHeight or remove it
                    //     tableElement.style.minHeight = originalTableMinHeight || '';
                    // });
                    toggleBtn.textContent = allSummariesVisible ? 'Zabaliť všetky' : 'Rozbaliť všetky';
                });
            } else {
                 console.warn(`[DocumentTable ${tableId}] Toggle button #${btnId} not found.`);
            }
        } else {
            // Optional: Handle case where container exists but no documents to show
            // container.innerHTML = '<p>Žiadne dokumenty na zobrazenie.</p>';
            if (toggleBtn) toggleBtn.style.display = 'none'; // Hide button if no data
        }
    });
</script>

{/* Scoped component styles */}
<style>
    .document-table-container {
      /* Add any container-specific styles if needed */
      margin-bottom: 2rem; /* Example: Add space below the component */
    }

    /* Styles previously in index.astro */
    .tabulator .tabulator-cell a {
        color: inherit;
        text-decoration: underline;
    }
    .tabulator .tabulator-cell a:hover {
        color: blue;
    }
    .tabulator-cell {
        white-space: pre-wrap;
        word-wrap: break-word;
    }
    .row-summary {
        font-size: 0.9em;
    }
</style>