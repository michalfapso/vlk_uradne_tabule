# This workflow orchestrates the daily data scrape/analysis,
# commits the updated data, builds the Astro site, and deploys it to GitHub Pages.
name: Scrape, Analyze, and Deploy Website

on:
  # Schedule the workflow to run daily at 20:00 UTC
  # You can adjust the time/frequency using cron syntax: https://crontab.guru/
  schedule:
    - cron: '0 18 * * *' # UTC timezone (18:00 UTC = 20:00 CEST)

  # Allow manual triggering of the workflow from the GitHub Actions tab
  workflow_dispatch: {}

# Set permissions needed for the actions
permissions:
  contents: write # Needed to commit changes to the data directory
  pages: write # Needed to deploy to GitHub Pages
  id-token: write # Needed for the Deploy Pages action (OIDC)

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Use a standard runner environment

    # Configure the GitHub Pages environment (required by deploy-pages@v4)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Get the deployment URL from the deploy step

    env:
      REQUESTS_CA_BUNDLE: ${{ github.workspace }}/analyzer/custom_ca_bundle.pem # Set custom CA bundle for requests

    steps:
      - name: Checkout code
        # Checks out your repository under $GITHUB_WORKSPACE
        uses: actions/checkout@v4

      - name: Install required packages
        run: sudo apt-get update && sudo apt-get install -y pandoc

      # --- Scraper and Analyzer Steps ---

      - name: Set up Python
        # Use the latest available Python 3.x version
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip' # Cache pip dependencies for faster runs

      - name: Install Analyzer Dependencies
        # Install dependencies listed in analyzer/requirements.txt
        run: pip install -r requirements.txt
        working-directory: ./analyzer # Run this command in the analyzer directory

      - name: 1. Get list of districts
        run: python 1_zoznam_okresov.py > ../data/1_zoznam_okresov.json
        working-directory: ./analyzer # Run this command in the analyzer directory

      - name: Upload District List Artifact
        uses: actions/upload-artifact@v4
        with:
          name: 1-district-list
          path: ./data/1_zoznam_okresov.json

      - name: 2. Get official board contents
        run: python 2_uradne_tabule.py --input ../data/1_zoznam_okresov.json --output ../data/2_uradne_tabule.json
        working-directory: ./analyzer # Run this command in the analyzer directory

      - name: Upload Board Contents Artifact
        uses: actions/upload-artifact@v4
        with:
          name: 2-board-contents
          path: ./data/2_uradne_tabule.json

      - name: 3. Diff new vs old board contents
        # Use || true because this step might fail if the _old file doesn't exist on the first run, but we want to continue.
        # Subsequent steps should handle an empty diff file gracefully.
        run: python 3_diff.py --old ../data/2_uradne_tabule_old.json --new ../data/2_uradne_tabule.json > ../data/3_diff.json || true
        working-directory: ./analyzer # Run this command in the analyzer directory

      - name: Upload Board Diff Artifact
        # Upload even if the diff step had issues (e.g., empty diff)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 3-board-diff
          path: ./data/3_diff.json

      - name: 4. Process new documents (convert, analyze)
        run: python 4_process_documents.py --input ../data/3_diff.json --docs-dir ../data/docs
        working-directory: ./analyzer # Run this command in the analyzer directory
        env:
          # Pass the Gemini API key secret to the script's environment
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Upload Diff Analysis Artifact
        # Upload even if the processing step had issues
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 4-diff-analysis
          path: ./data/4_diff_analysis.json

      - name: 5. Archive current board contents for next diff
        run: mv ../data/2_uradne_tabule.json ../data/2_uradne_tabule_old.json
        working-directory: ./analyzer # Run this command in the analyzer directory

      - name: Commit and Push Data Changes
        # Configures git user and commits changes in the data/ directory.
        # Only commits if there are actual changes.
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add data/ # Add the directory where data files were updated

          # Check if there are any changes staged before committing
          if git diff-index --quiet HEAD --; then
            echo "No data changes detected."
          else
            git commit -m "data: Daily update ($(date +%Y-%m-%d))"
            git push
            echo "Data changes committed and pushed."
          fi
        # Note: The GITHUB_TOKEN automatically provided has permissions
        # to push to the branch that triggered the workflow (like main for schedule).

      # --- Website Build and Deploy Steps ---

      - name: Set up Node.js
        # Use a Node.js version compatible with Astro
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or 'lts/*', specify a version suitable for your Astro build
          cache: 'npm' # Cache npm dependencies for faster runs
          cache-dependency-path: ./website/package-lock.json # Point cache to website directory

      - name: Install Website Dependencies
        # Install dependencies listed in website/package.json
        run: npm install
        working-directory: ./website

      - name: Build Astro Site
        # Run the Astro build command.
        run: npm run build
        working-directory: ./website

      - name: Upload Pages artifact
        # Upload the static build output (from website/dist) as a workflow artifact
        # that the deploy-pages action will use.
        uses: actions/upload-pages-artifact@v3
        with:
          path: './website/dist' # Specify the directory where Astro outputs its build files

      - name: Deploy to GitHub Pages
        # Deploy the uploaded artifact to GitHub Pages.
        id: deployment # Assign an ID to this step to reference its outputs (like the URL)
        uses: actions/deploy-pages@v4